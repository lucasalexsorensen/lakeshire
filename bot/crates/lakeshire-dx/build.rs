use std::{env, fs, io::Write, path::Path};

fn main() {
    let areas_dir = Path::new("./assets/areas");

    let out_dir = env::var("OUT_DIR").unwrap();
    let dest_file = Path::new(&out_dir).join("areas_assets.rs");

    let mut file = fs::File::create(dest_file).unwrap();
    writeln!(file, "// This file is auto-generated by build.rs").unwrap();
    writeln!(file, "// {:?}", areas_dir.canonicalize().unwrap()).unwrap();
    writeln!(file, "use std::collections::HashMap;").unwrap();
    writeln!(file, "use dioxus::prelude::*;").unwrap(); // for Asset
    writeln!(file, "lazy_static::lazy_static! {{").unwrap();
    writeln!(
        file,
        "    pub static ref AREA_MAPS: HashMap<usize, Asset> = {{"
    )
    .unwrap();
    writeln!(file, "        let mut m = HashMap::new();").unwrap();

    for entry in fs::read_dir(areas_dir).unwrap() {
        let entry = entry.unwrap();
        let path = entry.path();
        if path.is_file() {
            let filename = path.file_name().unwrap().to_string_lossy().into_owned();
            let stem = path.file_stem().unwrap().to_string_lossy();
            if let Ok(index) = stem.parse::<usize>() {
                writeln!(
                    file,
                    "        m.insert({}, asset!(\"/assets/areas/{}\"));",
                    index, filename
                )
                .unwrap();
            }
        }
    }

    writeln!(file, "        m").unwrap();
    writeln!(file, "    }};").unwrap();
    writeln!(file, "}}").unwrap();
}
