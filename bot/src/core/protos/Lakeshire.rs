// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `Lakeshire.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct StructuredMessage {
    // message fields
    BotState: ::std::option::Option<BotState>,
    pub Player: ::protobuf::SingularPtrField<Player>,
    pub Target: ::protobuf::SingularPtrField<Target>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StructuredMessage {
    fn default() -> &'a StructuredMessage {
        <StructuredMessage as ::protobuf::Message>::default_instance()
    }
}

impl StructuredMessage {
    pub fn new() -> StructuredMessage {
        ::std::default::Default::default()
    }

    // required .BotState BotState = 1;


    pub fn get_BotState(&self) -> BotState {
        self.BotState.unwrap_or(BotState::Stopped)
    }
    pub fn clear_BotState(&mut self) {
        self.BotState = ::std::option::Option::None;
    }

    pub fn has_BotState(&self) -> bool {
        self.BotState.is_some()
    }

    // Param is passed by value, moved
    pub fn set_BotState(&mut self, v: BotState) {
        self.BotState = ::std::option::Option::Some(v);
    }

    // required .Player Player = 2;


    pub fn get_Player(&self) -> &Player {
        self.Player.as_ref().unwrap_or_else(|| <Player as ::protobuf::Message>::default_instance())
    }
    pub fn clear_Player(&mut self) {
        self.Player.clear();
    }

    pub fn has_Player(&self) -> bool {
        self.Player.is_some()
    }

    // Param is passed by value, moved
    pub fn set_Player(&mut self, v: Player) {
        self.Player = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Player(&mut self) -> &mut Player {
        if self.Player.is_none() {
            self.Player.set_default();
        }
        self.Player.as_mut().unwrap()
    }

    // Take field
    pub fn take_Player(&mut self) -> Player {
        self.Player.take().unwrap_or_else(|| Player::new())
    }

    // optional .Target Target = 3;


    pub fn get_Target(&self) -> &Target {
        self.Target.as_ref().unwrap_or_else(|| <Target as ::protobuf::Message>::default_instance())
    }
    pub fn clear_Target(&mut self) {
        self.Target.clear();
    }

    pub fn has_Target(&self) -> bool {
        self.Target.is_some()
    }

    // Param is passed by value, moved
    pub fn set_Target(&mut self, v: Target) {
        self.Target = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Target(&mut self) -> &mut Target {
        if self.Target.is_none() {
            self.Target.set_default();
        }
        self.Target.as_mut().unwrap()
    }

    // Take field
    pub fn take_Target(&mut self) -> Target {
        self.Target.take().unwrap_or_else(|| Target::new())
    }
}

impl ::protobuf::Message for StructuredMessage {
    fn is_initialized(&self) -> bool {
        if self.BotState.is_none() {
            return false;
        }
        if self.Player.is_none() {
            return false;
        }
        for v in &self.Player {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.Target {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.BotState, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.Player)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.Target)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.BotState {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        if let Some(ref v) = self.Player.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.Target.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.BotState {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(ref v) = self.Player.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.Target.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StructuredMessage {
        StructuredMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<BotState>>(
                "BotState",
                |m: &StructuredMessage| { &m.BotState },
                |m: &mut StructuredMessage| { &mut m.BotState },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Player>>(
                "Player",
                |m: &StructuredMessage| { &m.Player },
                |m: &mut StructuredMessage| { &mut m.Player },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Target>>(
                "Target",
                |m: &StructuredMessage| { &m.Target },
                |m: &mut StructuredMessage| { &mut m.Target },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StructuredMessage>(
                "StructuredMessage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StructuredMessage {
        static instance: ::protobuf::rt::LazyV2<StructuredMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StructuredMessage::new)
    }
}

impl ::protobuf::Clear for StructuredMessage {
    fn clear(&mut self) {
        self.BotState = ::std::option::Option::None;
        self.Player.clear();
        self.Target.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StructuredMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StructuredMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Player {
    // message fields
    pub UnitInfo: ::protobuf::SingularPtrField<Unit>,
    pub PosInfo: ::protobuf::SingularPtrField<Position>,
    Flags: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Player {
    fn default() -> &'a Player {
        <Player as ::protobuf::Message>::default_instance()
    }
}

impl Player {
    pub fn new() -> Player {
        ::std::default::Default::default()
    }

    // required .Unit UnitInfo = 1;


    pub fn get_UnitInfo(&self) -> &Unit {
        self.UnitInfo.as_ref().unwrap_or_else(|| <Unit as ::protobuf::Message>::default_instance())
    }
    pub fn clear_UnitInfo(&mut self) {
        self.UnitInfo.clear();
    }

    pub fn has_UnitInfo(&self) -> bool {
        self.UnitInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_UnitInfo(&mut self, v: Unit) {
        self.UnitInfo = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_UnitInfo(&mut self) -> &mut Unit {
        if self.UnitInfo.is_none() {
            self.UnitInfo.set_default();
        }
        self.UnitInfo.as_mut().unwrap()
    }

    // Take field
    pub fn take_UnitInfo(&mut self) -> Unit {
        self.UnitInfo.take().unwrap_or_else(|| Unit::new())
    }

    // required .Position PosInfo = 2;


    pub fn get_PosInfo(&self) -> &Position {
        self.PosInfo.as_ref().unwrap_or_else(|| <Position as ::protobuf::Message>::default_instance())
    }
    pub fn clear_PosInfo(&mut self) {
        self.PosInfo.clear();
    }

    pub fn has_PosInfo(&self) -> bool {
        self.PosInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_PosInfo(&mut self, v: Position) {
        self.PosInfo = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_PosInfo(&mut self) -> &mut Position {
        if self.PosInfo.is_none() {
            self.PosInfo.set_default();
        }
        self.PosInfo.as_mut().unwrap()
    }

    // Take field
    pub fn take_PosInfo(&mut self) -> Position {
        self.PosInfo.take().unwrap_or_else(|| Position::new())
    }

    // required uint64 Flags = 3;


    pub fn get_Flags(&self) -> u64 {
        self.Flags.unwrap_or(0)
    }
    pub fn clear_Flags(&mut self) {
        self.Flags = ::std::option::Option::None;
    }

    pub fn has_Flags(&self) -> bool {
        self.Flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_Flags(&mut self, v: u64) {
        self.Flags = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for Player {
    fn is_initialized(&self) -> bool {
        if self.UnitInfo.is_none() {
            return false;
        }
        if self.PosInfo.is_none() {
            return false;
        }
        if self.Flags.is_none() {
            return false;
        }
        for v in &self.UnitInfo {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.PosInfo {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.UnitInfo)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.PosInfo)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.Flags = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.UnitInfo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.PosInfo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.Flags {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.UnitInfo.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.PosInfo.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.Flags {
            os.write_uint64(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Player {
        Player::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Unit>>(
                "UnitInfo",
                |m: &Player| { &m.UnitInfo },
                |m: &mut Player| { &mut m.UnitInfo },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Position>>(
                "PosInfo",
                |m: &Player| { &m.PosInfo },
                |m: &mut Player| { &mut m.PosInfo },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "Flags",
                |m: &Player| { &m.Flags },
                |m: &mut Player| { &mut m.Flags },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Player>(
                "Player",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Player {
        static instance: ::protobuf::rt::LazyV2<Player> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Player::new)
    }
}

impl ::protobuf::Clear for Player {
    fn clear(&mut self) {
        self.UnitInfo.clear();
        self.PosInfo.clear();
        self.Flags = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Player {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Player {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Target {
    // message fields
    pub UnitInfo: ::protobuf::SingularPtrField<Unit>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Target {
    fn default() -> &'a Target {
        <Target as ::protobuf::Message>::default_instance()
    }
}

impl Target {
    pub fn new() -> Target {
        ::std::default::Default::default()
    }

    // required .Unit UnitInfo = 1;


    pub fn get_UnitInfo(&self) -> &Unit {
        self.UnitInfo.as_ref().unwrap_or_else(|| <Unit as ::protobuf::Message>::default_instance())
    }
    pub fn clear_UnitInfo(&mut self) {
        self.UnitInfo.clear();
    }

    pub fn has_UnitInfo(&self) -> bool {
        self.UnitInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_UnitInfo(&mut self, v: Unit) {
        self.UnitInfo = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_UnitInfo(&mut self) -> &mut Unit {
        if self.UnitInfo.is_none() {
            self.UnitInfo.set_default();
        }
        self.UnitInfo.as_mut().unwrap()
    }

    // Take field
    pub fn take_UnitInfo(&mut self) -> Unit {
        self.UnitInfo.take().unwrap_or_else(|| Unit::new())
    }
}

impl ::protobuf::Message for Target {
    fn is_initialized(&self) -> bool {
        if self.UnitInfo.is_none() {
            return false;
        }
        for v in &self.UnitInfo {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.UnitInfo)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.UnitInfo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.UnitInfo.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Target {
        Target::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Unit>>(
                "UnitInfo",
                |m: &Target| { &m.UnitInfo },
                |m: &mut Target| { &mut m.UnitInfo },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Target>(
                "Target",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Target {
        static instance: ::protobuf::rt::LazyV2<Target> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Target::new)
    }
}

impl ::protobuf::Clear for Target {
    fn clear(&mut self) {
        self.UnitInfo.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Target {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Target {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Unit {
    // message fields
    Name: ::protobuf::SingularField<::std::string::String>,
    Level: ::std::option::Option<i64>,
    Class: ::std::option::Option<Class>,
    HealthCurrent: ::std::option::Option<i64>,
    HealthMax: ::std::option::Option<i64>,
    PowerCurrent: ::std::option::Option<i64>,
    PowerMax: ::std::option::Option<i64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Unit {
    fn default() -> &'a Unit {
        <Unit as ::protobuf::Message>::default_instance()
    }
}

impl Unit {
    pub fn new() -> Unit {
        ::std::default::Default::default()
    }

    // required string Name = 1;


    pub fn get_Name(&self) -> &str {
        match self.Name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_Name(&mut self) {
        self.Name.clear();
    }

    pub fn has_Name(&self) -> bool {
        self.Name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_Name(&mut self, v: ::std::string::String) {
        self.Name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Name(&mut self) -> &mut ::std::string::String {
        if self.Name.is_none() {
            self.Name.set_default();
        }
        self.Name.as_mut().unwrap()
    }

    // Take field
    pub fn take_Name(&mut self) -> ::std::string::String {
        self.Name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required int64 Level = 2;


    pub fn get_Level(&self) -> i64 {
        self.Level.unwrap_or(0)
    }
    pub fn clear_Level(&mut self) {
        self.Level = ::std::option::Option::None;
    }

    pub fn has_Level(&self) -> bool {
        self.Level.is_some()
    }

    // Param is passed by value, moved
    pub fn set_Level(&mut self, v: i64) {
        self.Level = ::std::option::Option::Some(v);
    }

    // optional .Class Class = 3;


    pub fn get_Class(&self) -> Class {
        self.Class.unwrap_or(Class::None)
    }
    pub fn clear_Class(&mut self) {
        self.Class = ::std::option::Option::None;
    }

    pub fn has_Class(&self) -> bool {
        self.Class.is_some()
    }

    // Param is passed by value, moved
    pub fn set_Class(&mut self, v: Class) {
        self.Class = ::std::option::Option::Some(v);
    }

    // required int64 HealthCurrent = 4;


    pub fn get_HealthCurrent(&self) -> i64 {
        self.HealthCurrent.unwrap_or(0)
    }
    pub fn clear_HealthCurrent(&mut self) {
        self.HealthCurrent = ::std::option::Option::None;
    }

    pub fn has_HealthCurrent(&self) -> bool {
        self.HealthCurrent.is_some()
    }

    // Param is passed by value, moved
    pub fn set_HealthCurrent(&mut self, v: i64) {
        self.HealthCurrent = ::std::option::Option::Some(v);
    }

    // required int64 HealthMax = 5;


    pub fn get_HealthMax(&self) -> i64 {
        self.HealthMax.unwrap_or(0)
    }
    pub fn clear_HealthMax(&mut self) {
        self.HealthMax = ::std::option::Option::None;
    }

    pub fn has_HealthMax(&self) -> bool {
        self.HealthMax.is_some()
    }

    // Param is passed by value, moved
    pub fn set_HealthMax(&mut self, v: i64) {
        self.HealthMax = ::std::option::Option::Some(v);
    }

    // optional int64 PowerCurrent = 6;


    pub fn get_PowerCurrent(&self) -> i64 {
        self.PowerCurrent.unwrap_or(0)
    }
    pub fn clear_PowerCurrent(&mut self) {
        self.PowerCurrent = ::std::option::Option::None;
    }

    pub fn has_PowerCurrent(&self) -> bool {
        self.PowerCurrent.is_some()
    }

    // Param is passed by value, moved
    pub fn set_PowerCurrent(&mut self, v: i64) {
        self.PowerCurrent = ::std::option::Option::Some(v);
    }

    // optional int64 PowerMax = 7;


    pub fn get_PowerMax(&self) -> i64 {
        self.PowerMax.unwrap_or(0)
    }
    pub fn clear_PowerMax(&mut self) {
        self.PowerMax = ::std::option::Option::None;
    }

    pub fn has_PowerMax(&self) -> bool {
        self.PowerMax.is_some()
    }

    // Param is passed by value, moved
    pub fn set_PowerMax(&mut self, v: i64) {
        self.PowerMax = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for Unit {
    fn is_initialized(&self) -> bool {
        if self.Name.is_none() {
            return false;
        }
        if self.Level.is_none() {
            return false;
        }
        if self.HealthCurrent.is_none() {
            return false;
        }
        if self.HealthMax.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.Name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.Level = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.Class, 3, &mut self.unknown_fields)?
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.HealthCurrent = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.HealthMax = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.PowerCurrent = ::std::option::Option::Some(tmp);
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.PowerMax = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.Name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.Level {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.Class {
            my_size += ::protobuf::rt::enum_size(3, v);
        }
        if let Some(v) = self.HealthCurrent {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.HealthMax {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.PowerCurrent {
            my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.PowerMax {
            my_size += ::protobuf::rt::value_size(7, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.Name.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.Level {
            os.write_int64(2, v)?;
        }
        if let Some(v) = self.Class {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(v) = self.HealthCurrent {
            os.write_int64(4, v)?;
        }
        if let Some(v) = self.HealthMax {
            os.write_int64(5, v)?;
        }
        if let Some(v) = self.PowerCurrent {
            os.write_int64(6, v)?;
        }
        if let Some(v) = self.PowerMax {
            os.write_int64(7, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Unit {
        Unit::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "Name",
                |m: &Unit| { &m.Name },
                |m: &mut Unit| { &mut m.Name },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "Level",
                |m: &Unit| { &m.Level },
                |m: &mut Unit| { &mut m.Level },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Class>>(
                "Class",
                |m: &Unit| { &m.Class },
                |m: &mut Unit| { &mut m.Class },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "HealthCurrent",
                |m: &Unit| { &m.HealthCurrent },
                |m: &mut Unit| { &mut m.HealthCurrent },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "HealthMax",
                |m: &Unit| { &m.HealthMax },
                |m: &mut Unit| { &mut m.HealthMax },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "PowerCurrent",
                |m: &Unit| { &m.PowerCurrent },
                |m: &mut Unit| { &mut m.PowerCurrent },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "PowerMax",
                |m: &Unit| { &m.PowerMax },
                |m: &mut Unit| { &mut m.PowerMax },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Unit>(
                "Unit",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Unit {
        static instance: ::protobuf::rt::LazyV2<Unit> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Unit::new)
    }
}

impl ::protobuf::Clear for Unit {
    fn clear(&mut self) {
        self.Name.clear();
        self.Level = ::std::option::Option::None;
        self.Class = ::std::option::Option::None;
        self.HealthCurrent = ::std::option::Option::None;
        self.HealthMax = ::std::option::Option::None;
        self.PowerCurrent = ::std::option::Option::None;
        self.PowerMax = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Unit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Unit {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Position {
    // message fields
    MapX: ::std::option::Option<u64>,
    MapY: ::std::option::Option<u64>,
    WorldX: ::std::option::Option<i64>,
    WorldY: ::std::option::Option<i64>,
    InstanceId: ::std::option::Option<u64>,
    Facing: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Position {
    fn default() -> &'a Position {
        <Position as ::protobuf::Message>::default_instance()
    }
}

impl Position {
    pub fn new() -> Position {
        ::std::default::Default::default()
    }

    // required uint64 MapX = 1;


    pub fn get_MapX(&self) -> u64 {
        self.MapX.unwrap_or(0)
    }
    pub fn clear_MapX(&mut self) {
        self.MapX = ::std::option::Option::None;
    }

    pub fn has_MapX(&self) -> bool {
        self.MapX.is_some()
    }

    // Param is passed by value, moved
    pub fn set_MapX(&mut self, v: u64) {
        self.MapX = ::std::option::Option::Some(v);
    }

    // required uint64 MapY = 2;


    pub fn get_MapY(&self) -> u64 {
        self.MapY.unwrap_or(0)
    }
    pub fn clear_MapY(&mut self) {
        self.MapY = ::std::option::Option::None;
    }

    pub fn has_MapY(&self) -> bool {
        self.MapY.is_some()
    }

    // Param is passed by value, moved
    pub fn set_MapY(&mut self, v: u64) {
        self.MapY = ::std::option::Option::Some(v);
    }

    // required sint64 WorldX = 3;


    pub fn get_WorldX(&self) -> i64 {
        self.WorldX.unwrap_or(0)
    }
    pub fn clear_WorldX(&mut self) {
        self.WorldX = ::std::option::Option::None;
    }

    pub fn has_WorldX(&self) -> bool {
        self.WorldX.is_some()
    }

    // Param is passed by value, moved
    pub fn set_WorldX(&mut self, v: i64) {
        self.WorldX = ::std::option::Option::Some(v);
    }

    // required sint64 WorldY = 4;


    pub fn get_WorldY(&self) -> i64 {
        self.WorldY.unwrap_or(0)
    }
    pub fn clear_WorldY(&mut self) {
        self.WorldY = ::std::option::Option::None;
    }

    pub fn has_WorldY(&self) -> bool {
        self.WorldY.is_some()
    }

    // Param is passed by value, moved
    pub fn set_WorldY(&mut self, v: i64) {
        self.WorldY = ::std::option::Option::Some(v);
    }

    // required uint64 InstanceId = 5;


    pub fn get_InstanceId(&self) -> u64 {
        self.InstanceId.unwrap_or(0)
    }
    pub fn clear_InstanceId(&mut self) {
        self.InstanceId = ::std::option::Option::None;
    }

    pub fn has_InstanceId(&self) -> bool {
        self.InstanceId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_InstanceId(&mut self, v: u64) {
        self.InstanceId = ::std::option::Option::Some(v);
    }

    // required uint64 Facing = 6;


    pub fn get_Facing(&self) -> u64 {
        self.Facing.unwrap_or(0)
    }
    pub fn clear_Facing(&mut self) {
        self.Facing = ::std::option::Option::None;
    }

    pub fn has_Facing(&self) -> bool {
        self.Facing.is_some()
    }

    // Param is passed by value, moved
    pub fn set_Facing(&mut self, v: u64) {
        self.Facing = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for Position {
    fn is_initialized(&self) -> bool {
        if self.MapX.is_none() {
            return false;
        }
        if self.MapY.is_none() {
            return false;
        }
        if self.WorldX.is_none() {
            return false;
        }
        if self.WorldY.is_none() {
            return false;
        }
        if self.InstanceId.is_none() {
            return false;
        }
        if self.Facing.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.MapX = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.MapY = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.WorldX = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.WorldY = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.InstanceId = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.Facing = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.MapX {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.MapY {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.WorldX {
            my_size += ::protobuf::rt::value_varint_zigzag_size(3, v);
        }
        if let Some(v) = self.WorldY {
            my_size += ::protobuf::rt::value_varint_zigzag_size(4, v);
        }
        if let Some(v) = self.InstanceId {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.Facing {
            my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.MapX {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.MapY {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.WorldX {
            os.write_sint64(3, v)?;
        }
        if let Some(v) = self.WorldY {
            os.write_sint64(4, v)?;
        }
        if let Some(v) = self.InstanceId {
            os.write_uint64(5, v)?;
        }
        if let Some(v) = self.Facing {
            os.write_uint64(6, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Position {
        Position::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "MapX",
                |m: &Position| { &m.MapX },
                |m: &mut Position| { &mut m.MapX },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "MapY",
                |m: &Position| { &m.MapY },
                |m: &mut Position| { &mut m.MapY },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeSint64>(
                "WorldX",
                |m: &Position| { &m.WorldX },
                |m: &mut Position| { &mut m.WorldX },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeSint64>(
                "WorldY",
                |m: &Position| { &m.WorldY },
                |m: &mut Position| { &mut m.WorldY },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "InstanceId",
                |m: &Position| { &m.InstanceId },
                |m: &mut Position| { &mut m.InstanceId },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "Facing",
                |m: &Position| { &m.Facing },
                |m: &mut Position| { &mut m.Facing },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Position>(
                "Position",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Position {
        static instance: ::protobuf::rt::LazyV2<Position> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Position::new)
    }
}

impl ::protobuf::Clear for Position {
    fn clear(&mut self) {
        self.MapX = ::std::option::Option::None;
        self.MapY = ::std::option::Option::None;
        self.WorldX = ::std::option::Option::None;
        self.WorldY = ::std::option::Option::None;
        self.InstanceId = ::std::option::Option::None;
        self.Facing = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Position {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Position {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum BotState {
    Stopped = 0,
    Running = 1,
    DumpPos = 2,
}

impl ::protobuf::ProtobufEnum for BotState {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<BotState> {
        match value {
            0 => ::std::option::Option::Some(BotState::Stopped),
            1 => ::std::option::Option::Some(BotState::Running),
            2 => ::std::option::Option::Some(BotState::DumpPos),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [BotState] = &[
            BotState::Stopped,
            BotState::Running,
            BotState::DumpPos,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<BotState>("BotState", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for BotState {
}

impl ::std::default::Default for BotState {
    fn default() -> Self {
        BotState::Stopped
    }
}

impl ::protobuf::reflect::ProtobufValue for BotState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Class {
    None = 0,
    Warrior = 1,
    Paladin = 2,
    Hunter = 3,
    Rogue = 4,
    Priest = 5,
    DeathKnight = 6,
    Shaman = 7,
    Mage = 8,
    Warlock = 9,
    Monk = 10,
    Druid = 11,
}

impl ::protobuf::ProtobufEnum for Class {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Class> {
        match value {
            0 => ::std::option::Option::Some(Class::None),
            1 => ::std::option::Option::Some(Class::Warrior),
            2 => ::std::option::Option::Some(Class::Paladin),
            3 => ::std::option::Option::Some(Class::Hunter),
            4 => ::std::option::Option::Some(Class::Rogue),
            5 => ::std::option::Option::Some(Class::Priest),
            6 => ::std::option::Option::Some(Class::DeathKnight),
            7 => ::std::option::Option::Some(Class::Shaman),
            8 => ::std::option::Option::Some(Class::Mage),
            9 => ::std::option::Option::Some(Class::Warlock),
            10 => ::std::option::Option::Some(Class::Monk),
            11 => ::std::option::Option::Some(Class::Druid),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Class] = &[
            Class::None,
            Class::Warrior,
            Class::Paladin,
            Class::Hunter,
            Class::Rogue,
            Class::Priest,
            Class::DeathKnight,
            Class::Shaman,
            Class::Mage,
            Class::Warlock,
            Class::Monk,
            Class::Druid,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Class>("Class", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Class {
}

impl ::std::default::Default for Class {
    fn default() -> Self {
        Class::None
    }
}

impl ::protobuf::reflect::ProtobufValue for Class {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fLakeshire.proto\"\x84\x01\n\x11StructuredMessage\x12'\n\x08BotStat\
    e\x18\x01\x20\x02(\x0e2\t.BotStateR\x08BotStateB\0\x12!\n\x06Player\x18\
    \x02\x20\x02(\x0b2\x07.PlayerR\x06PlayerB\0\x12!\n\x06Target\x18\x03\x20\
    \x01(\x0b2\x07.TargetR\x06TargetB\0:\0\"n\n\x06Player\x12#\n\x08UnitInfo\
    \x18\x01\x20\x02(\x0b2\x05.UnitR\x08UnitInfoB\0\x12%\n\x07PosInfo\x18\
    \x02\x20\x02(\x0b2\t.PositionR\x07PosInfoB\0\x12\x16\n\x05Flags\x18\x03\
    \x20\x02(\x04R\x05FlagsB\0:\0\"/\n\x06Target\x12#\n\x08UnitInfo\x18\x01\
    \x20\x02(\x0b2\x05.UnitR\x08UnitInfoB\0:\0\"\xe2\x01\n\x04Unit\x12\x14\n\
    \x04Name\x18\x01\x20\x02(\tR\x04NameB\0\x12\x16\n\x05Level\x18\x02\x20\
    \x02(\x03R\x05LevelB\0\x12\x1e\n\x05Class\x18\x03\x20\x01(\x0e2\x06.Clas\
    sR\x05ClassB\0\x12&\n\rHealthCurrent\x18\x04\x20\x02(\x03R\rHealthCurren\
    tB\0\x12\x1e\n\tHealthMax\x18\x05\x20\x02(\x03R\tHealthMaxB\0\x12$\n\x0c\
    PowerCurrent\x18\x06\x20\x01(\x03R\x0cPowerCurrentB\0\x12\x1c\n\x08Power\
    Max\x18\x07\x20\x01(\x03R\x08PowerMaxB\0:\0\"\xa8\x01\n\x08Position\x12\
    \x14\n\x04MapX\x18\x01\x20\x02(\x04R\x04MapXB\0\x12\x14\n\x04MapY\x18\
    \x02\x20\x02(\x04R\x04MapYB\0\x12\x18\n\x06WorldX\x18\x03\x20\x02(\x12R\
    \x06WorldXB\0\x12\x18\n\x06WorldY\x18\x04\x20\x02(\x12R\x06WorldYB\0\x12\
    \x20\n\nInstanceId\x18\x05\x20\x02(\x04R\nInstanceIdB\0\x12\x18\n\x06Fac\
    ing\x18\x06\x20\x02(\x04R\x06FacingB\0:\0*3\n\x08BotState\x12\x0b\n\x07S\
    topped\x10\0\x12\x0b\n\x07Running\x10\x01\x12\x0b\n\x07DumpPos\x10\x02\
    \x1a\0*\x99\x01\n\x05Class\x12\x08\n\x04None\x10\0\x12\x0b\n\x07Warrior\
    \x10\x01\x12\x0b\n\x07Paladin\x10\x02\x12\n\n\x06Hunter\x10\x03\x12\t\n\
    \x05Rogue\x10\x04\x12\n\n\x06Priest\x10\x05\x12\x0f\n\x0bDeathKnight\x10\
    \x06\x12\n\n\x06Shaman\x10\x07\x12\x08\n\x04Mage\x10\x08\x12\x0b\n\x07Wa\
    rlock\x10\t\x12\x08\n\x04Monk\x10\n\x12\t\n\x05Druid\x10\x0b\x1a\0B\0b\
    \x06proto2\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
